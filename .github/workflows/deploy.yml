name: CI/CD Pipeline with Docker Compose to AWS Lightsail

on:
  push:
    tags:
      - '*' # O workflow será acionado ao criar uma nova tag

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      ### Passo 1: Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v3

      ### Passo 2: Configurar o ambiente do PHP e instalar o Composer
      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, tokenizer, xml, zip, fileinfo
      - name: Install Composer dependencies
        run: |
          composer install --no-dev --no-progress --optimize-autoloader

      ### Passo 3: Instalar dependências do Node.js e construir o frontend
      - name: Install Node.js dependencies and build
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: |
          npm install
          npm run build

      ### Passo 4: Compactar arquivos necessários para o deploy
      - name: Compress application files
        run: |
          # Criar um diretório temporário para os arquivos
          mkdir temp_build

          # Copiar arquivos necessários para o diretório temporário
          rsync -av --progress --exclude=temp_build --exclude=build.tar.gz ./ temp_build/

          # Compactar o conteúdo do diretório temporário
          tar -czvf build.tar.gz -C temp_build .

          # Remover o diretório temporário após a compressão
          rm -rf temp_build


        ### Passo 5: Transferir arquivos para o servidor AWS Lightsail
      - name: Upload files to AWS Lightsail Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: build.tar.gz
          target: /home/ubuntu/project/

      ### Passo 6: Conectar ao servidor via SSH e fazer deploy
      - name: Deploy on AWS Lightsail
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            # Caminho do projeto no servidor
            PROJECT_PATH=/home/ubuntu/project/

            # Navegar até o diretório do projeto
            cd $PROJECT_PATH

            # Extrair os arquivos enviados
            tar -xzvf build.tar.gz && rm build.tar.gz

            # Build das imagens do Docker Compose e reiniciar containers
            docker-compose down
            docker-compose up -d --build

            # Limpeza de imagens Docker antigas para liberar espaço
            docker image prune -f
